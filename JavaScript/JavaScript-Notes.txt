#let,const and var -
#const - Once it is decalared it cannot be changed.

#var - is function-scoped, meaning it is accessible throughout the function in which it is declared.
-var allows re-declaration within the same scope.
-var is declared in the global scope, it becomes a property of the window object in browsers.

#let - is block-scoped, meaning it is only accessible within the {} block in which it is declared.
-let does not allow re-declaration within the same scope.
-let does not create a property on the window object.

*TRY NOT TO USE var*

When we have to print one value to the screen we use console.lof() but when we have to print more than one value we have to again and again use console.log(). So the solution to this problem is we can use console.table([]) given than inside the round brackets we have to use square brackets and inside that we can give multiple variable values separated by comma "," and done.

#Here is the Example- 

#So the First method is this that we can manually use console.log() to print each value- 

const accountId = 144553
let accountEmail = "wankhadekunal77@gmail.com"
var accountPassword = "15423"
accountCity = "Amravati"

// accountId = 2
accountEmail = "Wankhadekunal777@gmail.com"
accountPassword = "kun@l.googlepassword"
accountCity = "Mumbai"
console.log(accountEmail);
console.log(accountPassword);
console.log(accountCity);

copy the code and see the output.

#And the second way is that we can use console.table([])-

const accountId = 144553
let accountEmail = "wankhadekunal77@gmail.com"
var accountPassword = "15423"
accountCity = "Amravati"

// accountId = 2
accountEmail = "Wankhadekunal777@gmail.com"
accountPassword = "kun@l.googlepassword"
accountCity = "Mumbai"
console.table([accountEmail, accountPassword, accountCity]);

copy the code and see the output.

#DataTypes and ECMA Standards in JavaScript.

"use strict"; - Treat all JS code as newer version.


#Javascript has 8 Datatypes.

String => sequence of characters.
Number.
Bigint.
Boolean => true or false.
Undefined => By default it is a value. undefined is a undefined.
Null => standalone value. null is a type of object in Javascript
Symbol => unique.

#Object -

#The Object Datatype
The object data type can contain both built-in objects, and user defined objects:

#Built-in object types can be:

objects, arrays, dates, maps, sets, intarrays, floatarrays, promises, and more.
Most programming languages have many number types:

Whole numbers (integers):
byte (8-bit), short (16-bit), int (32-bit), long (64-bit)

Real numbers (floating-point):
float (32-bit), double (64-bit).

Javascript numbers are always one type:
double (64-bit floating point).

*NOTE*

Most programming languages have many number types:

Whole numbers (integers):
byte (8-bit), short (16-bit), int (32-bit), long (64-bit)

Real numbers (floating-point):
float (32-bit), double (64-bit).

Javascript numbers are always one type:
double (64-bit floating point).

we can use "typeof" to get the type of datatype we are using.